// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
   id Int @id @default(autoincrement())
   email String @unique
   name String
   senha String
   groups Group[]
   participants Participants[]
   categories Categories[]
}


model Participants {
  id Int @id @default(autoincrement())
  userEmail String
  user User @relation(fields: [userEmail], references: [email])
  groupId Int
  group Group @relation(fields: [groupId], references: [id])
}

model Group {
  id Int @id @default(autoincrement())
  name String
  description String
  ownerEmail String
  owner User @relation(fields: [ownerEmail], references: [email])
  participants Participants[]
}

model Categories {
  id Int @id @default(autoincrement())
  name String
  ownerEmail String
  owner User @relation(fields: [ownerEmail], references: [email])

  tasks TaskCategory[]

}

model Task {
  id            Int        @id @default(autoincrement()) // PK
  title        String          @db.VarChar(50)
  comments   String?         @db.Text
  description     String?         @db.Text
  ownerEmail          String          @db.VarChar(100)
  dateCreation   DateTime        @default(now())
  dateTask    DateTime  // data para conclus√£o
  dateConclusion DateTime? // data onde foi concluido
  isRecurrent  Boolean
  priority    Priority
  status        Status

  categories    TaskCategory[]

  @@map("task") 
}

model TaskCategory {
  id         Int      @id @default(autoincrement())
  taskId     Int
  categoryId Int
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  category   Categories @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([taskId, categoryId])
}

enum Priority {
  LOW
  MID
  HIGH
}

enum Status {
  TODO
  ONGOING
  COMPLETED

}
