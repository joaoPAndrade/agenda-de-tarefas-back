// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  name         String
  senha        String
  groups       Group[]
  participants Participants[]
  categories   Category[]

  @@map("user")
}

model Participants {
  id        Int    @id @default(autoincrement())
  userEmail String
  user      User   @relation(fields: [userEmail], references: [email])
  groupId   Int
  group     Group  @relation(fields: [groupId], references: [id])

  @@map("participants")
}

model Group {
  id           Int            @id @default(autoincrement())
  name         String
  description  String
  ownerEmail   String
  owner        User           @relation(fields: [ownerEmail], references: [email])
  participants Participants[]

  @@map("group")
}

model Category {
  id         Int    @id @default(autoincrement())
  name       String
  ownerEmail String
  owner      User   @relation(fields: [ownerEmail], references: [email])

  tasks Task[]

  @@map("category")
}

model Task {
  id             Int       @id @default(autoincrement()) // PK
  title          String    @db.VarChar(50)
  comments       String?   @db.Text
  description    String?   @db.Text
  ownerEmail     String    @db.VarChar(100)
  dateCreation   DateTime  @default(now())
  dateTask       DateTime // Data especulada para ser uma tarefa
  dateConclusion DateTime? // Data quando acabei. NECESSARIAMENTE dateConclusion >= dateTask
  isRecurrent    Boolean
  priority       Priority
  status         Status
  groupId        Int?

  categoryId Int?
  Category   Category? @relation(fields: [categoryId], references: [id])

  @@map("task")
}

enum Priority {
  LOW
  MID
  HIGH
}

enum Status {
  TODO
  ONGOING
  COMPLETED
}
